Index: app/src/main/cpp/native-lib.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <jni.h>\r\n#include <string>\r\n#include \"headers/components.hpp\"\r\n\r\n#include <cstdlib>\r\n#include <ctime>\r\n\r\nextern \"C\" jstring Java_com_kyeou_expensetracker_MainActivity_stringFromJNI(\r\n        JNIEnv* env,\r\n        jobject /* this */) {\r\n    std::string hello = \"Hello from C++\";\r\n    return env->NewStringUTF(hello.c_str());\r\n}\r\n\r\njint Jniint() {\r\n    srand((unsigned int) time(0));\r\n    int intrandom = (rand() % (990 - 101)) + 101;\r\n    return intrandom;\r\n}\r\n\r\n\r\n\r\nextern \"C\"\r\nJNIEXPORT jint JNICALL\r\nJava_com_kyeou_expensetracker_MainActivity_Jniint(JNIEnv *env, jobject thiz) {\r\n    return (jint) Jniint();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/cpp/native-lib.cpp b/app/src/main/cpp/native-lib.cpp
--- a/app/src/main/cpp/native-lib.cpp	(revision 3c9b201dee59f4328684a6171de02492a1251803)
+++ b/app/src/main/cpp/native-lib.cpp	(date 1650222866723)
@@ -12,16 +12,5 @@
     return env->NewStringUTF(hello.c_str());
 }
 
-jint Jniint() {
-    srand((unsigned int) time(0));
-    int intrandom = (rand() % (990 - 101)) + 101;
-    return intrandom;
-}
 
 
-
-extern "C"
-JNIEXPORT jint JNICALL
-Java_com_kyeou_expensetracker_MainActivity_Jniint(JNIEnv *env, jobject thiz) {
-    return (jint) Jniint();
-}
\ No newline at end of file
Index: app/src/main/cpp/headers/components.hpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//\r\n// Created by kyeou on 08/April/22.\r\n//\r\n\r\n// random change\r\n\r\n#ifndef EXPENSE_TRACKER_COMPOENTS_H\r\n#define EXPENSE_TRACKER_COMPONENTS_H\r\n\r\n#endif // EXPENSE_TRACKER_COMPONENTS_H\r\n\r\n#include \"iostream\"\r\n#include \"sstream\"\r\n#include \"fstream\"\r\n#include \"string\"\r\n#include \"stdio.h\"\r\n#include \"stdlib.h\"\r\n#include \"json.hpp\"\r\n\r\nusing json = nlohmann::json;\r\n\r\nstd::string months[] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n                        \"August\", \"September\", \"October\", \"November\", \"December\"};\r\n\r\nnamespace ETglobal\r\n{\r\n    bool is_empty(std::ifstream &pFile)\r\n    {\r\n        return pFile.peek() == std::ifstream::traits_type::eof();\r\n    }\r\n\r\n    // things that needs to be global\r\n    // A_O_T;\r\n    int A_O_T, numOfBudgets;\r\n    json transactionsJSON;\r\n    std::ofstream transFileWrite;\r\n\r\n    void Transaction_CLOSE()\r\n    {\r\n        // transFileWrite.close();\r\n        transFileWrite.open(\"transactionsJSON.json\");\r\n        transFileWrite << std::setw(5) << transactionsJSON;\r\n        transFileWrite.close();\r\n        // free(date);\r\n    }\r\n}\r\n\r\nusing namespace ETglobal;\r\n\r\nclass Date\r\n{\r\npublic:\r\n    Date()\r\n    {\r\n        this->month = 0;\r\n        this->day = 0;\r\n        this->year = 0;\r\n    }\r\n\r\n    Date(int month, int day, int year)\r\n    {\r\n        this->month = month;\r\n        this->day = day;\r\n        this->year = year;\r\n    }\r\n\r\n    __attribute__((unused)) std::string getMonthString(int i)\r\n    {\r\n        return months[i - 1];\r\n    }\r\n\r\n    void setDate(int month, int day, int year)\r\n    {\r\n        this->month = month;\r\n        this->day = day;\r\n        this->year = year;\r\n    }\r\n\r\n    int getMonth() { return this->month; }\r\n    int getDay() { return this->day; }\r\n    int getYear() { return this->year; }\r\n\r\n    Date getDate() { return *(this); }\r\n\r\n    std::string getDateString()\r\n    {\r\n        // printf(\"Print Date Test: %s, %d, %d\", months[date.getMonth()].substr(0, 3), date.getDay(),date.getYear());\r\n        std::ostringstream os;\r\n        // os << \"Print Date Test: \";\r\n        os << months[this->getMonth() - 1].substr(0, 3);\r\n        os << \" \";\r\n        os << this->getDay();\r\n        os << \", \";\r\n        os << this->getYear();\r\n        return os.str();\r\n    }\r\n\r\n    ~Date() {}\r\n\r\nprivate:\r\n    int month, day, year;\r\n    std::string dateString;\r\n};\r\n\r\nclass Transaction\r\n{\r\npublic:\r\n    __attribute__((unused)) Transaction(std::string name, Date *date, float amount)\r\n    {\r\n        this->name = name;\r\n        this->date = date;\r\n        this->amount = amount;\r\n        this->recorded = false;\r\n        // transFile.open(\"transactionsJSON.json\", std::ios_base::out ); //| std::ios_base::app);\r\n    }\r\n\r\n    // need a boolean check to know when create new and and when to append\r\n    // by default it can just be opened to append mode as open creates the file if doesnt exist, wont terminate if it does\r\n\r\n    void setAll(std::string name, Date *date, float amount)\r\n    {\r\n        this->name = name;\r\n        this->date->setDate(date->getMonth(), date->getDay(), date->getYear());\r\n    }\r\n\r\n    std::string getTransString()\r\n    {\r\n        std::ostringstream os;\r\n        os << \"Name: \";\r\n        os << name;\r\n        os << \" | Date: \";\r\n        os << this->date->getDateString();\r\n        os << \" | Amount: \";\r\n        os << amount;\r\n\r\n        return os.str();\r\n    }\r\n\r\n    void setAmount(float amount) { this->amount = amount; }\r\n\r\n    void setName(std::string name) { this->name = name; }\r\n\r\n    void setDate(Date *date) { this->date = date; }\r\n\r\n    void setRecord(bool q) { this->recorded = q; }\r\n\r\n    void setCorD(std::string s) { this->creditORdebit = (s.compare(\"Debit\")) ? 0 : 1; }\r\n\r\n    Date getDate() { return date->getDate(); }\r\n\r\n    bool getCorD() { return this->creditORdebit; }\r\n\r\n    std::string getName() { return this->name; }\r\n\r\n    float getAmount() { return this->amount; }\r\n\r\n    // write to the JSON variable\r\n    void writeTrans()\r\n    {\r\n        transFileRead.open(\"transactionsJSON.json\");\r\n        if (!(is_empty(transFileRead)))\r\n        {\r\n            transFileRead.close();\r\n            std::ifstream i(\"transactionsJSON.json\");\r\n            i >> transactionsJSON;\r\n            i.close();\r\n        }\r\n        else\r\n        {\r\n            A_O_T = 0;\r\n        }\r\n\r\n    } // end of function\r\n\r\n    void addTrans()\r\n    {\r\n        writeTrans();\r\n        transFileWrite.open(\"transactionsJSON.json\", std::ios_base::out);\r\n        transactionsJSON[A_O_T][\"Name: \"] = this->name;\r\n        transactionsJSON[A_O_T][\"Date: \"] = this->date->getDateString();\r\n        transactionsJSON[A_O_T][\"Amount: \"] = this->amount;\r\n        transactionsJSON[A_O_T][\"ATTRIBUTE->RECORDED_BOOL: \"] = this->recorded;\r\n        A_O_T++;\r\n        // transFileWrite.open(\"transactionsJSON.json\");\r\n        transFileWrite << std::setw(5) << transactionsJSON;\r\n        transFileWrite.close();\r\n    }\r\n\r\nprivate:\r\n    std::string name;\r\n    Date *date;\r\n    // ID int may not be used, but here just in case\r\n    int id;\r\n    // int A_O_T;\r\n    float amount;\r\n    bool recorded;\r\n    // 1 for credit, 0 for debit\r\n    bool creditORdebit;\r\n\r\n    std::ifstream transFileRead;\r\n\r\n}; // end class\r\n\r\n// this class handles all user data, this created a user.json file that holds\r\n// Income Budget Saving A_o_T Score\r\nclass USER\r\n{\r\npublic:\r\n    USER()\r\n    {\r\n        // file will need to be gathered through the access token granted from Google Drive API\r\n        userRead.open(\"user.json\");\r\n        if (is_empty(userRead))\r\n        {\r\n            userRead.close();\r\n            userWrite.open(\"user.json\", std::ios_base::out);\r\n            user = {\r\n                {\"Name\", \"FirstName LastName\"},\r\n                {\"A_O_T\", 0},\r\n                {\"Budgets\", {0}},\r\n                {\"Income\", 0},\r\n                {\"Scores\", {}},\r\n                {\"SumDebits\", 0}};\r\n            // userWrite << std::setw(4) << user << std::endl;\r\n            // userWrite.close();\r\n        }\r\n        else\r\n        {\r\n            // read file and gather data -> A_O_T\r\n            userRead.close();\r\n            std::ifstream i(\"user.json\");\r\n            i >> user;\r\n            i.close();\r\n            userWrite.open(\"user.json\", std::ios_base::out);\r\n            // need to read A_O_T value from JSON\r\n            A_O_T = user[\"A_O_T\"];\r\n        }\r\n    }\r\n    // need a parse procedure for fields that are integer values\r\n\r\n    void setUserValue(std::string s, int iValue, float dValue)\r\n    {\r\n        // when this function is called, if you want to set user[\"A_O_T\"] -\r\n        // call setUserValue(\"A_O_T\", value, 0)\r\n        // if you want set budget scores or sum debits\r\n        //->setUserValue(\"A_O_T\", 0, value)\r\n        user[s] = (iValue != 0) ? iValue : dValue;\r\n    }\r\n\r\n    void addBudget(float amount)\r\n    {\r\n        int currAMT = user[\"Budgets\"].size();\r\n        // currAMT++;\r\n        user[\"Budgets\"][currAMT] = amount;\r\n    }\r\n\r\n    void recordDebits()\r\n    {\r\n        float temp = 0.0;\r\n        int c = 0;\r\n        // int itCount = 0;\r\n        for (json::iterator it = transactionsJSON.begin(); it != transactionsJSON.end(); ++it)\r\n        {\r\n\r\n            if ((*it)[\"ATTRIBUTE->RECORDED_BOOL: \"] == false)\r\n            {\r\n                // std::cout << (*it)[\"Amount: \"] << std::endl;\r\n                float as = (*it)[\"Amount: \"];\r\n                temp += as;\r\n                (*it)[\"ATTRIBUTE->RECORDED_BOOL: \"] = true;\r\n                // itCount++;\r\n            } // end if\r\n        }\r\n        user[\"SumDebits\"].clear();\r\n        user[\"SumDebits\"] = temp;\r\n\r\n        int iOS = user[\"Budgets\"].size();\r\n        float currBud = user[\"Budgets\"][iOS - 1];\r\n        if (((currBud - temp) / currBud) * 10 < 0)\r\n        {\r\n            user[\"Scores\"][iOS - 1] = 0;\r\n        }\r\n        else\r\n        {\r\n            user[\"Scores\"][iOS - 1] = ((currBud - temp) / currBud) * 10;\r\n        }\r\n    }\r\n\r\n    void USER_CLOSE()\r\n    {\r\n        /*\r\n        A_O_T = 0;\r\n        for (json::iterator it = transactionsJSON.begin(); it != transactionsJSON.end(); ++it)\r\n        {\r\n            A_O_T++;\r\n        } */\r\n        Transaction_CLOSE();\r\n        setUserValue(\"A_O_T\", A_O_T, 0);\r\n        userWrite << std::setw(4) << user << std::endl;\r\n        userWrite.close();\r\n    }\r\n\r\n    ~USER() {}\r\n\r\nprivate:\r\n    std::ifstream userRead;\r\n    std::ofstream userWrite;\r\n    json user;\r\n};\r\n\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/*\r\n// class to manage spreadsheet\r\n// Name Date Credit Debt   Recorded Bool\r\n// A1    B1   C1      D1       F1\r\n\r\n// Income Budget Saving A_o_T Score\r\n// H        J       L     N     P\r\nclass SpreadSheet\r\n{\r\npublic:\r\n    SpreadSheet(bool con)\r\n    {\r\n        WorkBook.open(\"./UserData.xlsx\");\r\n        con = (WorkBook) ? 0 : 1;\r\n        if (con == 0)\r\n        {\r\n            WorkBook.create(\"./UserData.xlsx\");\r\n            //worksheet = WorkBook.workbook().worksheet(\"Sheet1\");\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"A1\").value() = \"Name\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"B1\").value() = \"Date\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"C1\").value() = \"Credit\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"D1\").value() = \"Debit\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"F1\").value() = \"Recording Bool\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"H1\").value() = \"Income\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"J1\").value() = \"Budget\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"L1\").value() = \"Savings\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"N1\").value() = \"A_O_T\";\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(\"P1\").value() = \"Score\";\r\n\r\n            // after this, the user must be prompted for monthly income and desired budget\r\n        }\r\n        //else\r\n        //{\r\n            // WorkBook.open(\"./UserData.xlsx\");\r\n            // = WorkBook.workbook().worksheet(\"Sheet1\");\r\n        //}\r\n    } // end con struct\r\n\r\n    void recordTransaction(Transaction *t, int i)\r\n    {\r\n        std::ostringstream cellString;\r\n        char cs [] = {'A', 'B', 'Z', 'F'};\r\n        std::string  ttr [4];\r\n        ttr[0] = t->getName();\r\n        ttr[1] = t->getDate().getDateString();\r\n        cs[2] = (t->getCorD()) ? 'C' : 'D';\r\n        ttr[2] = t->getAmount();\r\n        ttr[3] = \"0\";\r\n        for (int i = 0; i < 4; i++)\r\n        {\r\n            cellString << cs[i] << i;\r\n            WorkBook.workbook().worksheet(\"Sheet1\").cell(cellString.str()).value() = ttr[i];\r\n        } // end for\r\n    }     // end func\r\n\r\n    ~SpreadSheet() {\r\n\r\n        WorkBook.save();\r\n    }\r\n\r\n\r\nprivate:\r\n    OpenXLSX::XLDocument WorkBook;\r\n    //auto worksheet;\r\n};\r\n*/\r\n\r\n// adding transaction to database will require a function call to setDate\r\n\r\n/*\r\nint main() {\r\n\r\n//printf(\"\\n\\nValid Case Check: Date is Valid, Transaction is Valid\\n\");\r\n    Date *date = new Date(1, 1, 2000);\r\n    Transaction trans = Transaction(\"Test Transaction\", date, 12.34);\r\n    Database database;\r\n    database.recordTrans(trans);\r\n//printf(\"%s\" , database.getTrans(0).getTransString().c_str());\r\n//printf(\"Date String Test: \\n%s\\n-------\\n\", date->getDateString().c_str());\r\n    printf(\"Transaction String: \\n%s\\n\\n\", trans.getTransString().c_str());\r\n\r\n    printf(\"recordTransaction() Tests\\n\");\r\n    printf(\"-------\\nTest: First Recorded Transaction = Test Transaction\\nExpected Result: True\\n\\n\");\r\n    printf(\"Transaction String: \\n%s\\n\\n\", trans.getTransString().c_str());\r\n    printf(\"Recorded Transaction: \\n%s\\n\\n\", database.getTrans(0).getTransString().c_str());\r\n    recordTransactionTest(database, trans, database.getTrans(0));\r\n\r\n    printf(\"-------\\nTest: Recorded Transaction Has Different Dollar Amount:\\nExpected Result: False\\n\\n\");\r\n    trans.setAmount(32.65);\r\n    printf(\"Transaction String: \\n%s\\n\\n\", trans.getTransString().c_str());\r\n    printf(\"Recorded Transaction: \\n%s\\n\\n\", database.getTrans(0).getTransString().c_str());\r\n    recordTransactionTest(database, trans, database.getTrans(0));\r\n\r\n\r\n\r\n\r\n}\r\n */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/cpp/headers/components.hpp b/app/src/main/cpp/headers/components.hpp
--- a/app/src/main/cpp/headers/components.hpp	(revision 3c9b201dee59f4328684a6171de02492a1251803)
+++ b/app/src/main/cpp/headers/components.hpp	(date 1650144817988)
@@ -64,10 +64,7 @@
         this->year = year;
     }
 
-    __attribute__((unused)) std::string getMonthString(int i)
-    {
-        return months[i - 1];
-    }
+    __attribute__((unused)) std::string getMonthString(int i) { return months[i - 1]; }
 
     void setDate(int month, int day, int year)
     {
Index: app/src/main/java/com/kyeou/expensetracker/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kyeou.expensetracker;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.os.Bundle;\r\nimport android.widget.TextView;\r\n\r\nimport com.kyeou.expensetracker.databinding.ActivityMainBinding;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    // Used to load the 'expensetracker' library on application startup.\r\n    static {\r\n        System.loadLibrary(\"expensetracker\");\r\n    }\r\n\r\n    private ActivityMainBinding binding;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n\r\n        // Example of a call to a native method\r\n        TextView tv = binding.sampleText;\r\n        tv.setText(stringFromJNI());\r\n\r\n    }\r\n\r\n    /**\r\n     * A native method that is implemented by the 'expensetracker' native library,\r\n     * which is packaged with this application.\r\n     */\r\n    public native String stringFromJNI();\r\n    public native int Jniint();\r\n    //public native String stringFromJNI2();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/kyeou/expensetracker/MainActivity.java b/app/src/main/java/com/kyeou/expensetracker/MainActivity.java
--- a/app/src/main/java/com/kyeou/expensetracker/MainActivity.java	(revision 3c9b201dee59f4328684a6171de02492a1251803)
+++ b/app/src/main/java/com/kyeou/expensetracker/MainActivity.java	(date 1650222866719)
@@ -34,6 +34,11 @@
      * which is packaged with this application.
      */
     public native String stringFromJNI();
-    public native int Jniint();
+    //public native int Jniint();
     //public native String stringFromJNI2();
+
+    public void main(String args[])
+    {
+       System.out.println(stringFromJNI());
+    }
 }
\ No newline at end of file
