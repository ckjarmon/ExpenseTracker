Index: app/src/main/java/com/kyeou/expensetracker/Reports.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kyeou.expensetracker;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.util.Pair;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.Canvas;\r\nimport android.graphics.Paint;\r\nimport android.graphics.Typeface;\r\nimport android.graphics.pdf.PdfDocument;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.Toast;\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\n\r\nimport com.google.android.material.datepicker.MaterialDatePicker;\r\nimport com.google.android.material.datepicker.MaterialPickerOnPositiveButtonClickListener;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Calendar;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\n\r\nimport static android.Manifest.permission.READ_EXTERNAL_STORAGE;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\npublic class Reports extends AppCompatActivity {\r\n    //variables\r\n    Spinner monthSelection, yearSelection;\r\n    String month, year;\r\n    int pageHeight = 1120;\r\n    int pagewidth = 792;\r\n    Button generatePDFbtn;\r\n\r\n    // creating a bitmap variable\r\n    // for storing our images\r\n    Bitmap bmp, logo;\r\n\r\n    // constant code for runtime permissions\r\n    private static final int PERMISSION_REQUEST_CODE = 200;\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_reports);\r\n\r\n        monthSelection = (Spinner) findViewById(R.id.monthSelection);\r\n        yearSelection = (Spinner) findViewById(R.id.yearSelection);\r\n\r\n        ArrayAdapter<String> monthsItems = new ArrayAdapter<String>(Reports.this,\r\n                android.R.layout.simple_list_item_1, getResources().getStringArray(R.array.months));\r\n        monthsItems.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        monthSelection.setAdapter(monthsItems);\r\n\r\n        ArrayAdapter<String> yearItems = new ArrayAdapter<String>(Reports.this,\r\n                android.R.layout.simple_list_item_1, getResources().getStringArray(R.array.years));\r\n        monthsItems.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        yearSelection.setAdapter(yearItems);\r\n\r\n        generatePDFbtn = findViewById(R.id.generateReportButton);\r\n        bmp = BitmapFactory.decodeResource(getResources(), R.drawable.ic_report);\r\n        logo = Bitmap.createScaledBitmap(bmp, 140, 140, false);\r\n\r\n        // below code is used for\r\n        // checking our permissions.\r\n        if (checkPermission()) {\r\n            Toast.makeText(this, \"Permission Granted\", Toast.LENGTH_SHORT).show();\r\n        } else {\r\n            requestPermission();\r\n        }\r\n\r\n        generatePDFbtn.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                // calling method to\r\n                // generate our PDF file.\r\n                generatePDF();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    public void generatePDF() {\r\n\r\n        month = monthSelection.getSelectedItem().toString();\r\n        year = yearSelection.getSelectedItem().toString();\r\n\r\n\r\n        //genReport(Integer.parseInt(month), Integer.parseInt(year));\r\n        Log.d(\"test\", month);\r\n        Log.d(\"test\", year);\r\n\r\n\r\n        // creating an object variable\r\n        // for our PDF document.\r\n        PdfDocument pdfDocument = new PdfDocument();\r\n\r\n        // two variables for paint \"paint\" is used\r\n        // for drawing shapes and we will use \"title\"\r\n        // for adding text in our PDF file.\r\n        Paint paint = new Paint();\r\n        Paint title = new Paint();\r\n\r\n        // we are adding page info to our PDF file\r\n        // in which we will be passing our pageWidth,\r\n        // pageHeight and number of pages and after that\r\n        // we are calling it to create our PDF.\r\n        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pagewidth, pageHeight, 1).create();\r\n\r\n        // below line is used for setting\r\n        // start page for our PDF file.\r\n        PdfDocument.Page myPage = pdfDocument.startPage(pageInfo);\r\n\r\n        // creating a variable for canvas\r\n        // from our page of PDF.\r\n        Canvas canvas = myPage.getCanvas();\r\n\r\n        // below line is used to draw our image on our PDF file.\r\n        // the first parameter of our drawbitmap method is\r\n        // our bitmap\r\n        // second parameter is position from left\r\n        // third parameter is position from top and last\r\n        // one is our variable for paint.\r\n        canvas.drawBitmap(logo, 56, 40, paint);\r\n\r\n        // below line is used for adding typeface for\r\n        // our text which we will be adding in our PDF file.\r\n        title.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.NORMAL));\r\n\r\n        // below line is used for setting text size\r\n        // which we will be displaying in our PDF file.\r\n        title.setTextSize(24);\r\n\r\n        // below line is sued for setting color\r\n        // of our text inside our PDF file.\r\n        title.setColor(ContextCompat.getColor(this, R.color.purple_200));\r\n\r\n        // below line is used to draw text in our PDF file.\r\n        // the first parameter is our text, second parameter\r\n        // is position from start, third parameter is position from top\r\n        // and then we are passing our variable of paint which is title.\r\n\r\n\r\n        canvas.drawText(\"Monthly Report\", 209, 100, title);\r\n        canvas.drawText(month, 209, 80, title);\r\n        canvas.drawText(year, 209, 80, title);\r\n\r\n        // similarly we are creating another text and in this\r\n        // we are aligning this text to center of our PDF file.\r\n        title.setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL));\r\n        title.setColor(ContextCompat.getColor(this, R.color.purple_200));\r\n        title.setTextSize(20);\r\n\r\n        // below line is used for setting\r\n        // our text to center of PDF.\r\n        title.setTextAlign(Paint.Align.CENTER);\r\n        canvas.drawText(\"TRANSACTIONS\", 396, 560, title);\r\n\r\n        // after adding all attributes to our\r\n        // PDF file we will be finishing our page.\r\n        pdfDocument.finishPage(myPage);\r\n\r\n        // below line is used to set the name of\r\n        // our PDF file and its path.\r\n        File file = new File(Environment.getExternalStorageDirectory(), \"Report.pdf\");\r\n\r\n        try {\r\n            // after creating a file name we will\r\n            // write our PDF file to that location.\r\n            pdfDocument.writeTo(new FileOutputStream(file));\r\n\r\n            // below line is to print toast message\r\n            // on completion of PDF generation.\r\n            Toast.makeText(Reports.this, \"PDF file generated successfully.\", Toast.LENGTH_SHORT).show();\r\n        } catch (IOException e) {\r\n            // below line is used\r\n            // to handle error\r\n            e.printStackTrace();\r\n        }\r\n        // after storing our pdf to that\r\n        // location we are closing our PDF file.\r\n        pdfDocument.close();\r\n\r\n    }\r\n\r\n\r\n    public void exitPage(View view) throws IOException {\r\n        Intent intent = new Intent(this, UserProfile.class);\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n    private boolean checkPermission() {\r\n        // checking of permissions.\r\n        int permission1 = ContextCompat.checkSelfPermission(getApplicationContext(), WRITE_EXTERNAL_STORAGE);\r\n        int permission2 = ContextCompat.checkSelfPermission(getApplicationContext(), READ_EXTERNAL_STORAGE);\r\n        return permission1 == PackageManager.PERMISSION_GRANTED && permission2 == PackageManager.PERMISSION_GRANTED;\r\n    }\r\n\r\n    private void requestPermission() {\r\n        // requesting permissions if not provided.\r\n        ActivityCompat.requestPermissions(this, new String[]{WRITE_EXTERNAL_STORAGE, READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_CODE);\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\r\n        if (requestCode == PERMISSION_REQUEST_CODE) {\r\n            if (grantResults.length > 0) {\r\n\r\n                // after requesting permissions we are showing\r\n                // users a toast message of permission granted.\r\n                boolean writeStorage = grantResults[0] == PackageManager.PERMISSION_GRANTED;\r\n                boolean readStorage = grantResults[1] == PackageManager.PERMISSION_GRANTED;\r\n\r\n                if (writeStorage && readStorage) {\r\n                    Toast.makeText(this, \"Permission Granted..\", Toast.LENGTH_SHORT).show();\r\n                } else {\r\n                    Toast.makeText(this, \"Permission Denied.\", Toast.LENGTH_SHORT).show();\r\n                    finish();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/kyeou/expensetracker/Reports.java b/app/src/main/java/com/kyeou/expensetracker/Reports.java
--- a/app/src/main/java/com/kyeou/expensetracker/Reports.java	(revision 807326287aad16d627514c628bd0dbbfdd417868)
+++ b/app/src/main/java/com/kyeou/expensetracker/Reports.java	(date 1651525719615)
@@ -78,169 +78,13 @@
         monthsItems.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
         yearSelection.setAdapter(yearItems);
 
-        generatePDFbtn = findViewById(R.id.generateReportButton);
-        bmp = BitmapFactory.decodeResource(getResources(), R.drawable.ic_report);
-        logo = Bitmap.createScaledBitmap(bmp, 140, 140, false);
-
-        // below code is used for
-        // checking our permissions.
-        if (checkPermission()) {
-            Toast.makeText(this, "Permission Granted", Toast.LENGTH_SHORT).show();
-        } else {
-            requestPermission();
-        }
-
-        generatePDFbtn.setOnClickListener(new View.OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                // calling method to
-                // generate our PDF file.
-                generatePDF();
-            }
-        });
-
-    }
-
-    public void generatePDF() {
-
-        month = monthSelection.getSelectedItem().toString();
-        year = yearSelection.getSelectedItem().toString();
-
-
-        //genReport(Integer.parseInt(month), Integer.parseInt(year));
-        Log.d("test", month);
-        Log.d("test", year);
-
-
-        // creating an object variable
-        // for our PDF document.
-        PdfDocument pdfDocument = new PdfDocument();
-
-        // two variables for paint "paint" is used
-        // for drawing shapes and we will use "title"
-        // for adding text in our PDF file.
-        Paint paint = new Paint();
-        Paint title = new Paint();
-
-        // we are adding page info to our PDF file
-        // in which we will be passing our pageWidth,
-        // pageHeight and number of pages and after that
-        // we are calling it to create our PDF.
-        PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(pagewidth, pageHeight, 1).create();
-
-        // below line is used for setting
-        // start page for our PDF file.
-        PdfDocument.Page myPage = pdfDocument.startPage(pageInfo);
-
-        // creating a variable for canvas
-        // from our page of PDF.
-        Canvas canvas = myPage.getCanvas();
-
-        // below line is used to draw our image on our PDF file.
-        // the first parameter of our drawbitmap method is
-        // our bitmap
-        // second parameter is position from left
-        // third parameter is position from top and last
-        // one is our variable for paint.
-        canvas.drawBitmap(logo, 56, 40, paint);
-
-        // below line is used for adding typeface for
-        // our text which we will be adding in our PDF file.
-        title.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.NORMAL));
-
-        // below line is used for setting text size
-        // which we will be displaying in our PDF file.
-        title.setTextSize(24);
-
-        // below line is sued for setting color
-        // of our text inside our PDF file.
-        title.setColor(ContextCompat.getColor(this, R.color.purple_200));
-
-        // below line is used to draw text in our PDF file.
-        // the first parameter is our text, second parameter
-        // is position from start, third parameter is position from top
-        // and then we are passing our variable of paint which is title.
-
-
-        canvas.drawText("Monthly Report", 209, 100, title);
-        canvas.drawText(month, 209, 80, title);
-        canvas.drawText(year, 209, 80, title);
-
-        // similarly we are creating another text and in this
-        // we are aligning this text to center of our PDF file.
-        title.setTypeface(Typeface.defaultFromStyle(Typeface.NORMAL));
-        title.setColor(ContextCompat.getColor(this, R.color.purple_200));
-        title.setTextSize(20);
-
-        // below line is used for setting
-        // our text to center of PDF.
-        title.setTextAlign(Paint.Align.CENTER);
-        canvas.drawText("TRANSACTIONS", 396, 560, title);
 
-        // after adding all attributes to our
-        // PDF file we will be finishing our page.
-        pdfDocument.finishPage(myPage);
 
-        // below line is used to set the name of
-        // our PDF file and its path.
-        File file = new File(Environment.getExternalStorageDirectory(), "Report.pdf");
-
-        try {
-            // after creating a file name we will
-            // write our PDF file to that location.
-            pdfDocument.writeTo(new FileOutputStream(file));
-
-            // below line is to print toast message
-            // on completion of PDF generation.
-            Toast.makeText(Reports.this, "PDF file generated successfully.", Toast.LENGTH_SHORT).show();
-        } catch (IOException e) {
-            // below line is used
-            // to handle error
-            e.printStackTrace();
-        }
-        // after storing our pdf to that
-        // location we are closing our PDF file.
-        pdfDocument.close();
+    }
 
-    }
 
 
-    public void exitPage(View view) throws IOException {
-        Intent intent = new Intent(this, UserProfile.class);
-        startActivity(intent);
-    }
 
 
-    private boolean checkPermission() {
-        // checking of permissions.
-        int permission1 = ContextCompat.checkSelfPermission(getApplicationContext(), WRITE_EXTERNAL_STORAGE);
-        int permission2 = ContextCompat.checkSelfPermission(getApplicationContext(), READ_EXTERNAL_STORAGE);
-        return permission1 == PackageManager.PERMISSION_GRANTED && permission2 == PackageManager.PERMISSION_GRANTED;
-    }
-
-    private void requestPermission() {
-        // requesting permissions if not provided.
-        ActivityCompat.requestPermissions(this, new String[]{WRITE_EXTERNAL_STORAGE, READ_EXTERNAL_STORAGE}, PERMISSION_REQUEST_CODE);
-    }
-
-    @Override
-    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
-        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
-        if (requestCode == PERMISSION_REQUEST_CODE) {
-            if (grantResults.length > 0) {
-
-                // after requesting permissions we are showing
-                // users a toast message of permission granted.
-                boolean writeStorage = grantResults[0] == PackageManager.PERMISSION_GRANTED;
-                boolean readStorage = grantResults[1] == PackageManager.PERMISSION_GRANTED;
-
-                if (writeStorage && readStorage) {
-                    Toast.makeText(this, "Permission Granted..", Toast.LENGTH_SHORT).show();
-                } else {
-                    Toast.makeText(this, "Permission Denied.", Toast.LENGTH_SHORT).show();
-                    finish();
-                }
-            }
-        }
-    }
+    
 }
\ No newline at end of file
