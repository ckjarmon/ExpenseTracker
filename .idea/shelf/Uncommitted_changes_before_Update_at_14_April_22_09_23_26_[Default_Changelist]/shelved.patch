Index: app/src/main/cpp/CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># For more information about using CMake with Android Studio, read the\r\n# documentation: https://d.android.com/studio/projects/add-native-code.html\r\n\r\n# Sets the minimum version of CMake required to build the native library.\r\n\r\ncmake_minimum_required(VERSION 3.18.1)\r\n\r\n# Declares and names the project.\r\n\r\nproject(\"expensetracker\")\r\nset(CMAKE_CXX_STANDARD 17)\r\nset(CMAKE_SYSTEM_NAME Android)\r\n\r\n\r\n\r\n# Set the build output location to a common directory\r\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output)\r\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output)\r\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output)\r\n# Creates and names a library, sets it as either STATIC\r\n# or SHARED, and provides the relative paths to its source code.\r\n# You can define multiple libraries, and CMake builds them for you.\r\n# Gradle automatically packages shared libraries with your APK.\r\n\r\nadd_subdirectory(OpenXLSX)\r\n\r\n\r\n\r\nadd_library( # Sets the name of the library.\r\n        native-lib\r\n\r\n        # Sets the library as a shared library.\r\n        SHARED\r\n\r\n        # Provides a relative path to your source file(s).\r\n        native-lib.cpp)\r\n\r\n\r\n\r\n\r\n\r\n# Searches for a specified prebuilt library and stores the path as a\r\n# variable. Because CMake includes system libraries in the search path by\r\n# default, you only need to specify the name of the public NDK library\r\n# you want to add. CMake verifies that the library exists before\r\n# completing its build.\r\n\r\nfind_library( # Sets the name of the path variable.\r\n        log-lib\r\n\r\n        # Specifies the name of the NDK library that\r\n        # you want CMake to locate.\r\n        log)\r\n\r\n# Specifies libraries CMake should link to your target library. You\r\n# can link multiple libraries, such as libraries you define in this\r\n# build script, prebuilt third-party libraries, or system libraries.\r\n#add_executable(expensetrackerEXE native-lib.cpp)\r\ntarget_link_libraries(native-lib  OpenXLSX::OpenXLSX)\r\n#this line causes -> C/C++: clang++: error: linker command failed with exit code 1 (use -v to see invocation)\r\n\r\n\r\n\r\n\r\ntarget_link_libraries( # Specifies the target library.\r\n        # expensetracker\r\n        # OpenXLSX::OpenXLSX\r\n        # Links the target library to the log library\r\n        # included in the NDK.\r\n        native-lib\r\n        ${log-lib})\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/cpp/CMakeLists.txt b/app/src/main/cpp/CMakeLists.txt
--- a/app/src/main/cpp/CMakeLists.txt	(revision e78d53d9f50ca76c33851448a9e2ae1a7cca76d9)
+++ b/app/src/main/cpp/CMakeLists.txt	(date 1649800764190)
@@ -56,7 +56,8 @@
 # can link multiple libraries, such as libraries you define in this
 # build script, prebuilt third-party libraries, or system libraries.
 #add_executable(expensetrackerEXE native-lib.cpp)
-target_link_libraries(native-lib  OpenXLSX::OpenXLSX)
+
+#target_link_libraries(native-lib  OpenXLSX::OpenXLSX)
 #this line causes -> C/C++: clang++: error: linker command failed with exit code 1 (use -v to see invocation)
 
 
